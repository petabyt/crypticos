; MiniCASM Assembler
; Syntax:
; {cA}		put ascii char
; [foobar]	Comment
; {pHello}	Print string

#ifdef X86
	prt "MiniCASM"
	prt 10
	prt 13
#end

var temp 0

inc "$kernel/main.casm"
jmp func
	; Assembler commands
	a.comment:
		add gb 1 ; next char
		run k.movf
		equ gr ']' a.topA
	jmp a.comment

	a.topA:
		add gb 1
	jmp a.top
	
	a.command:
		set ga GET
		add gb 1 ; next char
		run k.movf
		;equ gr 'l' a.label
		equ gr 'c' a.char
		equ gr 'p' a.print
	
	a.char:
		; next char
		set ga GET
		add gb 1
		run k.movf

		; Use temp variable because
		; putInt needs gb
		set temp gb
		set gc gr
		run k.cinsInt
		set gb temp

		; Next chars
		add gb 2
	jmp a.top

	a.print:
		; next char
		set ga GET
		add gb 1
		run k.movf
		
		equ gr '}' a.top
		equ gr 0 a.top

		prt '!'

		; Push ga
		got gb
		inl "^d"

		; Will overwrite ga
		set gc gr
		run k.cinsInt

		; Pop ga
		got gb
		inl "av"

		prt '.'
	jmp a.print
func:

; Store the string into the buffer
set gb INPUT
set ga SET
s.top:
	got gc
	inl ","

	; Skip tabs, spaces from input
	equ gc 9 s.top
	equ gc ' ' s.top

	#ifdef X86
		equ gc '1' s.end
	#end

	run k.movf
	; Compare after so '\0' can be added
	equ gc 0 s.end
	
	add gb 1
	jmp s.top
s.end:

; Assembler
set gb INPUT
a.top:
	set ga GET
	run k.movf
	
	equ gr 0 a.end ; null terminator
	equ gr ' ' a.top
	equ gr '[' a.comment
	equ gr '{' a.command

	add gb 1
	equ gr 10 a.top ; skip newlines

	; Else, print
	prt gr
	jmp a.top
a.end:

#ifndef STANDALONE
jmp LIB
	inc "$kernel/movf.casm"
	inc "$kernel/math/high.casm"
	inc "$kernel/string/cinsint.casm"
LIB:
#end
